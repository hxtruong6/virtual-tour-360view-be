server {
    listen 80;
    server_name iprotect.asia www.iprotect.asia;

    location /api/ {

         set $cors_origin "";

        if ($http_origin ~* (http://localhost:3000|https://cms.iprotect.asia|https://cms.dev.iprotect.asia)) {
            set $cors_origin $http_origin;
        }

        # CORS configuration
        add_header 'Access-Control-Allow-Origin' $cors_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,x-api-key' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;

        # Handle preflight (OPTIONS) requests correctly
        if ($request_method = OPTIONS) {
            return 204;
        }

        # Enforce presence of a valid API key header
        if ($http_x_api_key != "iPr0t3ct-4pi-D1NP3m@F") {
            return 401;  # Unauthorized
        }

        # Existing proxy configuration
        proxy_pass http://127.0.0.1:4000;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_cache_bypass $http_upgrade;
    }

    # For cms :Proxy requests to the Next.js app running locally
    location / {
        # config for a nextjs website
        proxy_pass http://127.0.0.1:3000; # Forward to nextjs app running locally
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'Upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;
    }

    # Optional: Add caching headers for static assets
    location /_next/static/ {
        proxy_pass http://127.0.0.1:3000/_next/static/;
        add_header Cache-Control "public, max-age=31536000, immutable";
    }

        # Proxy WebSocket requests to the backend
    location /socket.io/ {
        proxy_pass http://127.0.0.1:4000;  # Backend server for WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }


    # File size
    client_max_body_size 30M;

    listen 443 ssl;
    listen [::]:443 ssl;

    # SSL Certificates
    ssl_certificate /etc/letsencrypt/live/iprotect.asia/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/iprotect.asia/privkey.pem;
    # include /etc/letsencrypt/options-ssl-nginx.conf;
    # ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

    # SSL Settings
    ssl_protocols TLSv1.2 TLSv1.3; # Use TLS 1.2 and 1.3
    ssl_ciphers HIGH:!aNULL:!MD5; # Use strong ciphers
    ssl_prefer_server_ciphers on; # Prefer server ciphers over client ciphers
}


server {
    if ($host = iprotect.asia) {
        return 301 https://$host$request_uri;
    } # Redirect to HTTPS

    server_name iprotect.asia;
    listen 80;
    return 404; # Return 404 for non-HTTPS requests
}
