// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["app"]
}

// ===== ENUMS =====

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CONTENT_CREATOR
  VIEWER

  @@schema("app")
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION

  @@schema("app")
}

enum TourStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  UNDER_REVIEW

  @@schema("app")
}

enum TourDifficulty {
  BEGINNER // Simple tours with basic navigation and few hotspots
  INTERMEDIATE // Moderate complexity with multiple scenes and interactive elements
  ADVANCED // Complex tours with extensive hotspots, custom interactions, and advanced features

  @@schema("app")
}

enum HotspotType {
  NAVIGATION // Links to other scenes or tours
  INFO // Displays information, images, or text content
  INTERACTIVE // Custom interactive elements (forms, videos, etc.)

  @@schema("app")
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT

  @@schema("app")
}

enum MediaStatus {
  UPLOADING // File is being uploaded
  PROCESSING // File is being processed (compression, thumbnail generation, etc.)
  READY // File is ready for use
  FAILED // Processing failed
  ARCHIVED // File is archived and not available

  @@schema("app")
}

enum AnalyticsEventType {
  TOUR_VIEW // User viewed a tour
  SCENE_VIEW // User viewed a specific scene
  HOTSPOT_CLICK // User clicked on a hotspot
  TOUR_SHARE // User shared a tour
  TOUR_BOOKMARK // User bookmarked a tour
  SESSION_START // User session started
  SESSION_END // User session ended

  @@schema("app")
}

// ===== CORE ENTITIES =====

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  username  String?    @unique
  firstName String?    @map("first_name")
  lastName  String?    @map("last_name")
  avatar    String?
  role      UserRole   @default(VIEWER)
  status    UserStatus @default(PENDING_VERIFICATION)
  language  String     @default("en") // User's preferred language for UI
  timezone  String     @default("UTC") // User's timezone for date/time display

  // Authentication
  hashedPassword         String?   @map("hashed_password")
  emailVerifiedAt        DateTime? @map("email_verified_at")
  lastLoginAt            DateTime? @map("last_login_at")
  passwordResetToken     String?   @map("password_reset_token")
  passwordResetExpiresAt DateTime? @map("password_reset_expires_at")

  // Audit fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at") // Soft delete timestamp

  // Relationships
  createdTours       VirtualTour[]    @relation("TourCreator")
  updatedTours       VirtualTour[]    @relation("TourUpdater")
  userSessions       UserSession[]
  analyticsEvents    AnalyticsEvent[]
  tourBookmarks      TourBookmark[]
  tourRatings        TourRating[]
  apiKeys            ApiKey[]
  uploadedMediaFiles MediaFile[]

  @@index([email])
  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@map("users")
  @@schema("app")
}

model VirtualTour {
  id           String          @id @default(cuid())
  title        String
  description  String?
  location     String? // Physical location of the tour (e.g., "Downtown Office Building")
  slug         String          @unique // URL-friendly identifier
  status       TourStatus      @default(DRAFT)
  difficulty   TourDifficulty? @default(BEGINNER) // Complexity level of the tour experience
  category     String? // Tour category (e.g., "Real Estate", "Museum", "Hotel")
  tags         String[] // Searchable tags for tour discovery
  thumbnailUrl String?         @map("thumbnail_url") // Preview image for the tour

  // SEO and metadata
  metaTitle       String?  @map("meta_title") // SEO title for search engines
  metaDescription String?  @map("meta_description") // SEO description for search engines
  metaKeywords    String[] @map("meta_keywords") // SEO keywords for search engines

  // Tour settings
  allowPublicAccess Boolean @default(true) @map("allow_public_access") // Whether tour is publicly accessible
  allowEmbedding    Boolean @default(true) @map("allow_embedding") // Whether tour can be embedded on other sites
  autoplayEnabled   Boolean @default(false) @map("autoplay_enabled") // Auto-rotate panorama on load
  autoplaySpeed     Int?    @default(2) @map("autoplay_speed") // Rotation speed in seconds per full rotation

  // Statistics
  viewCount     Int    @default(0) @map("view_count") // Total number of tour views
  shareCount    Int    @default(0) @map("share_count") // Total number of shares
  bookmarkCount Int    @default(0) @map("bookmark_count") // Total number of bookmarks
  averageRating Float? @default(0) @map("average_rating") // Average user rating (1-5 stars)
  totalRatings  Int    @default(0) @map("total_ratings") // Total number of ratings

  // Computed metadata
  totalScenes       Int  @default(0) @map("total_scenes") // Number of scenes in the tour
  totalHotspots     Int  @default(0) @map("total_hotspots") // Total number of hotspots across all scenes
  estimatedDuration Int? @map("estimated_duration") // Estimated time to complete tour (in minutes)

  // Apartment metadata
  apartmentMetadata Json? @map("apartment_metadata") // Flexible JSON for apartment-specific data (floor plan, specs, etc.)

  // Audit fields
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at") // When tour was first published
  deletedAt   DateTime? @map("deleted_at") // Soft delete timestamp

  // Foreign keys
  createdById String? @map("created_by_id")
  updatedById String? @map("updated_by_id")

  // Relationships
  createdBy       User?             @relation("TourCreator", fields: [createdById], references: [id])
  updatedBy       User?             @relation("TourUpdater", fields: [updatedById], references: [id])
  scenes          Scene[]
  translations    TourTranslation[]
  bookmarks       TourBookmark[]
  ratings         TourRating[]
  analyticsEvents AnalyticsEvent[]
  embeds          TourEmbed[]
  amenities       TourAmenity[]

  @@index([slug])
  @@index([status])
  @@index([category])
  @@index([createdById])
  @@index([createdAt])
  @@index([publishedAt])
  @@index([tags])
  @@map("virtual_tours")
  @@schema("app")
}

model Scene {
  id           String  @id @default(cuid())
  title        String
  description  String?
  order        Int // Display order within the tour
  panoramaUrl  String  @map("panorama_url") // 360-degree panorama image URL
  thumbnailUrl String? @map("thumbnail_url") // Preview image for the scene

  // Scene positioning (for map integration)
  mapPositionX Float? @map("map_position_x") // X coordinate on 2D map
  mapPositionY Float? @map("map_position_y") // Y coordinate on 2D map

  // Scene settings
  initialViewAngle Float? @default(0) @map("initial_view_angle") // Starting view angle in degrees
  maxZoom          Float? @default(3) @map("max_zoom") // Maximum zoom level allowed
  minZoom          Float? @default(0.5) @map("min_zoom") // Minimum zoom level allowed

  // Audit fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Foreign keys
  tourId String @map("tour_id")

  // Relationships
  tour            VirtualTour        @relation(fields: [tourId], references: [id], onDelete: Cascade)
  hotspots        Hotspot[]
  hotspotTargets  Hotspot[]          @relation("HotspotTarget")
  translations    SceneTranslation[]
  mediaFiles      SceneMedia[]
  analyticsEvents AnalyticsEvent[]

  @@unique([tourId, order])
  @@index([tourId])
  @@index([order])
  @@map("scenes")
  @@schema("app")
}

model Hotspot {
  id          String      @id @default(cuid())
  type        HotspotType
  title       String
  description String?

  // 3D positioning within the panorama
  positionX Float @map("position_x") // X coordinate in 3D space
  positionY Float @map("position_y") // Y coordinate in 3D space
  positionZ Float @map("position_z") // Z coordinate in 3D space

  // Visual settings
  iconUrl   String? @map("icon_url") // Custom icon image URL
  iconColor String? @default("#ffffff") @map("icon_color") // Icon color (hex)
  iconSize  Float?  @default(1.0) @map("icon_size") // Icon scale factor

  // Content for info hotspots
  content Json? // Flexible JSON structure for rich content (text, images, videos, etc.)

  // Navigation settings
  targetSceneId String? @map("target_scene_id") // Scene to navigate to (for navigation hotspots)

  // Animation settings
  animationType  String? @default("pulse") @map("animation_type") // Animation effect (pulse, bounce, etc.)
  animationSpeed Float?  @default(1.0) @map("animation_speed") // Animation speed multiplier

  // Audit fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Foreign keys
  sceneId String @map("scene_id")

  // Relationships
  scene           Scene                @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  targetScene     Scene?               @relation("HotspotTarget", fields: [targetSceneId], references: [id])
  translations    HotspotTranslation[]
  mediaFiles      HotspotMedia[]
  analyticsEvents AnalyticsEvent[]

  @@index([sceneId])
  @@index([type])
  @@index([targetSceneId])
  @@map("hotspots")
  @@schema("app")
}

// ===== MEDIA MANAGEMENT =====

model MediaFile {
  id           String      @id @default(cuid())
  originalName String      @map("original_name") // Original filename from upload
  fileName     String      @unique @map("file_name") // Generated unique filename
  filePath     String      @map("file_path") // Storage path
  fileSize     Int         @map("file_size") // File size in bytes
  mimeType     String      @map("mime_type") // MIME type
  mediaType    MediaType   @map("media_type")
  status       MediaStatus @default(UPLOADING)

  // Image/Video specific
  width    Int? // Image/video width in pixels
  height   Int? // Image/video height in pixels
  duration Float? // Video/audio duration in seconds

  // Processing metadata
  processingLog  String? @map("processing_log") // Processing status and error messages
  thumbnailPath  String? @map("thumbnail_path") // Generated thumbnail path
  compressedPath String? @map("compressed_path") // Compressed version path

  // Storage metadata
  storageProvider String? @default("local") @map("storage_provider") // Storage service (local, S3, etc.)
  externalUrl     String? @map("external_url") // External CDN URL if applicable

  // Gallery metadata
  galleryCategory    String? @map("gallery_category") // Gallery category (aerial-views, daylight-views, etc.)
  gallerySubcategory String? @map("gallery_subcategory") // Subcategory within gallery
  displayOrder       Int?    @default(0) @map("display_order") // Order in gallery display

  // Audit fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Foreign keys
  uploadedById String? @map("uploaded_by_id")

  // Relationships
  uploadedBy   User?          @relation(fields: [uploadedById], references: [id])
  sceneMedia   SceneMedia[]
  hotspotMedia HotspotMedia[]

  @@index([fileName])
  @@index([mediaType])
  @@index([status])
  @@index([uploadedById])
  @@index([galleryCategory])
  @@index([displayOrder])
  @@map("media_files")
  @@schema("app")
}

model SceneMedia {
  id          String @id @default(cuid())
  sceneId     String @map("scene_id")
  mediaFileId String @map("media_file_id")
  mediaType   String @map("media_type") // Type of media for this scene (panorama, thumbnail, background_audio)
  order       Int?   @default(0) // Display order for multiple media of same type

  scene     Scene     @relation(fields: [sceneId], references: [id], onDelete: Cascade)
  mediaFile MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)

  @@unique([sceneId, mediaFileId])
  @@index([sceneId])
  @@index([mediaFileId])
  @@map("scene_media")
  @@schema("app")
}

model HotspotMedia {
  id          String @id @default(cuid())
  hotspotId   String @map("hotspot_id")
  mediaFileId String @map("media_file_id")
  mediaType   String @map("media_type") // Type of media for this hotspot (icon, content_image, content_video)
  order       Int?   @default(0) // Display order for multiple media of same type

  hotspot   Hotspot   @relation(fields: [hotspotId], references: [id], onDelete: Cascade)
  mediaFile MediaFile @relation(fields: [mediaFileId], references: [id], onDelete: Cascade)

  @@unique([hotspotId, mediaFileId])
  @@index([hotspotId])
  @@index([mediaFileId])
  @@map("hotspot_media")
  @@schema("app")
}

// ===== INTERNATIONALIZATION =====

model TourTranslation {
  id              String  @id @default(cuid())
  tourId          String  @map("tour_id")
  language        String // Language code (e.g., "en", "es", "fr")
  title           String
  description     String?
  metaTitle       String? @map("meta_title")
  metaDescription String? @map("meta_description")

  tour VirtualTour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([tourId, language])
  @@index([tourId])
  @@index([language])
  @@map("tour_translations")
  @@schema("app")
}

model SceneTranslation {
  id          String  @id @default(cuid())
  sceneId     String  @map("scene_id")
  language    String // Language code (e.g., "en", "es", "fr")
  title       String
  description String?

  scene Scene @relation(fields: [sceneId], references: [id], onDelete: Cascade)

  @@unique([sceneId, language])
  @@index([sceneId])
  @@index([language])
  @@map("scene_translations")
  @@schema("app")
}

model HotspotTranslation {
  id          String  @id @default(cuid())
  hotspotId   String  @map("hotspot_id")
  language    String // Language code (e.g., "en", "es", "fr")
  title       String
  description String?
  content     Json? // Translated content for interactive hotspots

  hotspot Hotspot @relation(fields: [hotspotId], references: [id], onDelete: Cascade)

  @@unique([hotspotId, language])
  @@index([hotspotId])
  @@index([language])
  @@map("hotspot_translations")
  @@schema("app")
}

// ===== ANALYTICS & TRACKING =====

model UserSession {
  id           String  @id @default(cuid())
  sessionToken String  @unique @map("session_token") // Unique session identifier
  userId       String? @map("user_id") // Optional - anonymous sessions allowed
  ipAddress    String? @map("ip_address")
  userAgent    String? @map("user_agent")
  deviceType   String? @map("device_type") // Device category (desktop, mobile, tablet)
  browser      String? // Browser name and version
  os           String? // Operating system
  country      String? // Geographic location
  city         String?

  startedAt      DateTime  @default(now()) @map("started_at")
  endedAt        DateTime? @map("ended_at") // Session end time (null if active)
  lastActivityAt DateTime  @default(now()) @map("last_activity_at") // Last user interaction

  user            User?            @relation(fields: [userId], references: [id])
  analyticsEvents AnalyticsEvent[]

  @@index([sessionToken])
  @@index([userId])
  @@index([startedAt])
  @@map("user_sessions")
  @@schema("app")
}

model AnalyticsEvent {
  id        String             @id @default(cuid())
  eventType AnalyticsEventType @map("event_type")
  sessionId String?            @map("session_id")
  userId    String?            @map("user_id")
  tourId    String?            @map("tour_id")
  sceneId   String?            @map("scene_id")
  hotspotId String?            @map("hotspot_id")

  // Event metadata
  eventData Json?    @map("event_data") // Additional event-specific data
  duration  Float? // Event duration in seconds (for view events)
  timestamp DateTime @default(now())

  // Geographic data
  ipAddress String? @map("ip_address")
  country   String?
  city      String?

  session UserSession? @relation(fields: [sessionId], references: [id])
  user    User?        @relation(fields: [userId], references: [id])
  tour    VirtualTour? @relation(fields: [tourId], references: [id])
  scene   Scene?       @relation(fields: [sceneId], references: [id])
  hotspot Hotspot?     @relation(fields: [hotspotId], references: [id])

  @@index([eventType])
  @@index([timestamp])
  @@index([sessionId])
  @@index([userId])
  @@index([tourId])
  @@index([sceneId])
  @@index([hotspotId])
  @@map("analytics_events")
  @@schema("app")
}

// ===== USER ENGAGEMENT =====

model TourBookmark {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tourId    String   @map("tour_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour VirtualTour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([userId, tourId]) // One bookmark per user per tour
  @@index([userId])
  @@index([tourId])
  @@map("tour_bookmarks")
  @@schema("app")
}

model TourRating {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  tourId    String   @map("tour_id")
  rating    Int // User rating (1-5 stars)
  review    String? // Optional text review
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tour VirtualTour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@unique([userId, tourId]) // One rating per user per tour
  @@index([userId])
  @@index([tourId])
  @@index([rating])
  @@map("tour_ratings")
  @@schema("app")
}

// ===== API & EMBEDDING =====

model ApiKey {
  id      String @id @default(cuid())
  name    String // Human-readable name for the API key
  keyHash String @unique @map("key_hash") // Hashed API key for security
  userId  String @map("user_id")

  // Permissions
  allowRead      Boolean @default(true) @map("allow_read") // Can read tour data
  allowWrite     Boolean @default(false) @map("allow_write") // Can create/update tours
  allowAnalytics Boolean @default(false) @map("allow_analytics") // Can access analytics data

  // Rate limiting
  requestsPerDay Int?     @default(1000) @map("requests_per_day") // Daily request limit
  requestsCount  Int      @default(0) @map("requests_count") // Current day's request count
  lastResetAt    DateTime @default(now()) @map("last_reset_at") // Last time request count was reset

  // Status
  isActive   Boolean   @default(true) @map("is_active") // Whether key is active
  expiresAt  DateTime? @map("expires_at") // Key expiration date
  lastUsedAt DateTime? @map("last_used_at") // Last time key was used

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([keyHash])
  @@index([userId])
  @@index([isActive])
  @@map("api_keys")
  @@schema("app")
}

model TourEmbed {
  id         String  @id @default(cuid())
  tourId     String  @map("tour_id")
  embedToken String  @unique @map("embed_token") // Unique token for embedding
  domain     String? // Allowed domain for embedding (security)

  // Embed settings
  width        String? @default("100%") // Embed width (CSS value)
  height       String? @default("500px") // Embed height (CSS value)
  showControls Boolean @default(true) @map("show_controls") // Show tour controls
  showBranding Boolean @default(true) @map("show_branding") // Show platform branding
  autoplay     Boolean @default(false) // Auto-start tour

  // Statistics
  embedViews   Int       @default(0) @map("embed_views") // Number of views via embed
  lastAccessAt DateTime? @map("last_access_at") // Last time embed was accessed

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  tour VirtualTour @relation(fields: [tourId], references: [id], onDelete: Cascade)

  @@index([embedToken])
  @@index([tourId])
  @@index([domain])
  @@map("tour_embeds")
  @@schema("app")
}

// ===== AMENITIES =====

model Amenity {
  id           String  @id @default(cuid())
  name         String
  description  String?
  category     String // Amenity category (internal, external, building, neighborhood)
  iconName     String? @map("icon_name") // Icon identifier for UI display
  imageUrl     String? @map("image_url") // Amenity image URL
  isActive     Boolean @default(true) @map("is_active")
  displayOrder Int     @default(0) @map("display_order") // Order in amenity list

  // Audit fields
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  // Relationships
  tourAmenities TourAmenity[]

  @@index([category])
  @@index([isActive])
  @@index([displayOrder])
  @@map("amenities")
  @@schema("app")
}

model TourAmenity {
  id         String  @id @default(cuid())
  tourId     String  @map("tour_id")
  amenityId  String  @map("amenity_id")
  isFeatured Boolean @default(false) @map("is_featured") // Whether to highlight this amenity

  createdAt DateTime @default(now()) @map("created_at")

  // Relationships
  tour    VirtualTour @relation(fields: [tourId], references: [id], onDelete: Cascade)
  amenity Amenity     @relation(fields: [amenityId], references: [id], onDelete: Cascade)

  @@unique([tourId, amenityId]) // One amenity per tour
  @@index([tourId])
  @@index([amenityId])
  @@map("tour_amenities")
  @@schema("app")
}
